/*
 * Ã–rebro University IPW robot web interface
 * Copyright (C) 2019  Arvid Norlander
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

// Import the parts of bootstrap we actually use, instead of all of it.
@import "~bootstrap/scss/functions";
@import "~bootstrap/scss/variables";
@import "~bootstrap/scss/mixins";
@import "~bootstrap/scss/root";
@import "~bootstrap/scss/reboot";
@import "~bootstrap/scss/type";
@import "~bootstrap/scss/grid";
@import "~bootstrap/scss/tables";
@import "~bootstrap/scss/forms";
@import "~bootstrap/scss/buttons";
@import "~bootstrap/scss/transitions";
@import "~bootstrap/scss/input-group";
@import "~bootstrap/scss/card";
@import "~bootstrap/scss/alert";
@import "~bootstrap/scss/close";
@import "~bootstrap/scss/modal";
@import "~bootstrap/scss/tooltip";
@import "~bootstrap/scss/utilities";

$icon-font-path: '~open-iconic/font/fonts/';
@import "~open-iconic/font/css/open-iconic-bootstrap.scss";

// Define colours used for drawing stuff in the layers
$layer-colours: (
        "robot": green,
        "person": blue,
        "location": $orange,
        "current-goal": red,
);

// Export the colours as CSS variables so the JavaScript code can query the values
:root {
  @each $name, $colour in $layer-colours {
    --#{$name}-colour: #{$colour};
  }
  --map-background-colour: #cdcdcd;
}

// Classes for showing colours in the legend
@each $name, $colour in $layer-colours {
  .legend-#{$name} {
    color: $colour;
  }
}

.canvas-wrapper {
  position: relative;
  width: 100%;
  height: 500px;

  // Direct children should use absolute positioning.
  > * {
    position: absolute;
  }

  // Direct child canvases should be positioned top left.
  > canvas {
    top: 0;
    left: 0;
  }
}

// Define z indexes for the various layers on top of the map.
#map {
  z-index: 1;
}

#locations_canvas {
  z-index: 2;
}

// The location layer handles mouse clicks, thus full size layers above need pointer-events: none set.
#people {
  pointer-events: none;
  z-index: 3;
}
#robot {
  pointer-events: none;
  z-index: 4;
}

#legend {
  pointer-events: none;
  left: 0;
  top: 0;
  z-index: 10;
}

$alert-z-index: 11;

#status-alert, #connection-alert {
  z-index: $alert-z-index;
}

// The mouse tooltip is used to display the name of locations on mousing over them.
#mouse-tooltip {
  @extend .tooltip-inner;
  display: block;
  position: fixed;
  overflow: hidden;
  z-index: 100;
  pointer-events: none;
}

// This is for the floating alerts on top of the main map view
.floating-alert {
  top: 5%;
  left: 25%;
  width: 50%;
  text-align: center;
}

.semi-transparent {
  opacity: 85%;
}

.child-px3 > div {
  padding-left: 1rem;
  padding-right: 1rem;
}

#locations-table > tr > td {
  vertical-align: middle;
}

#locations-table > tr > td:last-child {
  text-align: right;
}

.div-center {
  display: flex;
  justify-content: center;
  align-items: center;
}
